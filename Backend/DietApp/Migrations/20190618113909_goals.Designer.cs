// <auto-generated />
using System;
using DietApp.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DietApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190618113909_goals")]
    partial class goals
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DietApp.Domain.Models.ExerciseReading", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("KcalBurned");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("ExerciseReadings");
                });

            modelBuilder.Entity("DietApp.Domain.Models.Friendship", b =>
                {
                    b.Property<int>("SrcUserID");

                    b.Property<int>("DestUserID");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.HasKey("SrcUserID", "DestUserID");

                    b.HasIndex("DestUserID");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("DietApp.Domain.Models.Goal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaxCaloriesKcal");

                    b.Property<int>("MinCaloriesKcal");

                    b.Property<int>("Reward");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("DietApp.Domain.Models.GoalInvitation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GoalID");

                    b.Property<int>("InvitedUserID");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("GoalID");

                    b.HasIndex("InvitedUserID");

                    b.ToTable("GoalInvitations");
                });

            modelBuilder.Entity("DietApp.Domain.Models.Meal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("DietApp.Domain.Models.MealReading", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("MealReadings");
                });

            modelBuilder.Entity("DietApp.Domain.Models.RefreshToken", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Expiration");

                    b.Property<string>("Token")
                        .IsRequired();

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DietApp.Domain.Models.ScoreLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("ScoredPoints");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("ScoreLogs");
                });

            modelBuilder.Entity("DietApp.Domain.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int>("Gender");

                    b.Property<int>("HeightCm");

                    b.Property<bool>("IsEmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("JoinDate");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("TelephoneNumber");

                    b.Property<decimal>("WeightKg");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DietApp.Domain.Models.ExerciseReading", b =>
                {
                    b.HasOne("DietApp.Domain.Models.User", "User")
                        .WithMany("ExercisesHistory")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DietApp.Domain.Models.Friendship", b =>
                {
                    b.HasOne("DietApp.Domain.Models.User", "DestUser")
                        .WithMany("AcceptedFriends")
                        .HasForeignKey("DestUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DietApp.Domain.Models.User", "SrcUser")
                        .WithMany("RequestedFriends")
                        .HasForeignKey("SrcUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DietApp.Domain.Models.GoalInvitation", b =>
                {
                    b.HasOne("DietApp.Domain.Models.Goal", "Goal")
                        .WithMany("GoalInvitations")
                        .HasForeignKey("GoalID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DietApp.Domain.Models.User", "InvitedUser")
                        .WithMany("GoalInvitations")
                        .HasForeignKey("InvitedUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DietApp.Domain.Models.Meal", b =>
                {
                    b.HasOne("DietApp.Domain.Models.User", "User")
                        .WithMany("SavedMeals")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DietApp.Domain.Models.Nutrients", "Nutrients", b1 =>
                        {
                            b1.Property<int>("MealID")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("CarbsGram");

                            b1.Property<int>("FatGram");

                            b1.Property<int>("ProteinGram");

                            b1.Property<int>("WaterMilli");

                            b1.HasKey("MealID");

                            b1.ToTable("Meals");

                            b1.HasOne("DietApp.Domain.Models.Meal")
                                .WithOne("Nutrients")
                                .HasForeignKey("DietApp.Domain.Models.Nutrients", "MealID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DietApp.Domain.Models.MealReading", b =>
                {
                    b.HasOne("DietApp.Domain.Models.User", "User")
                        .WithMany("MealsHistory")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DietApp.Domain.Models.Nutrients", "Nutrients", b1 =>
                        {
                            b1.Property<int>("MealReadingID")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("CarbsGram");

                            b1.Property<int>("FatGram");

                            b1.Property<int>("ProteinGram");

                            b1.Property<int>("WaterMilli");

                            b1.HasKey("MealReadingID");

                            b1.ToTable("MealReadings");

                            b1.HasOne("DietApp.Domain.Models.MealReading")
                                .WithOne("Nutrients")
                                .HasForeignKey("DietApp.Domain.Models.Nutrients", "MealReadingID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DietApp.Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("DietApp.Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DietApp.Domain.Models.ScoreLog", b =>
                {
                    b.HasOne("DietApp.Domain.Models.User", "User")
                        .WithMany("ScoreLogs")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
